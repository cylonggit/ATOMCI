package com.chen.crossTest.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class CrossChainNFT_sol_CrossChainNFT extends Contract {
    private static final String BINARY = "60806040523480156200001157600080fd5b50604051620033393803806200333983398101604052805160208201519082019101620000677f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620005e3810204565b6200009b7f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620005e3810204565b8151620000b090600590602085019062000765565b508051620000c690600690602084019062000765565b5060088054600160a060020a031990811633179091556009805490911673ed869df2e1a1a17a21f3ce8adf437f868d53167c179055620001277365ce35093d037031dce8f37b790d72a4e37ae47c62bc614e64010000000062000650810204565b6040805160e08101825262bc614e8082526001602080840191825284518086018652600c81527f4d79457468657265756d2d3100000000000000000000000000000000000000008183015284860190815285518087018752600b81527f6d796f776e65726c6f636b00000000000000000000000000000000000000000081840152606086015260006080860181905260a08601819052865180840190975280875260c0860196909652929094526007845282517f54cbe7b31e794ce2fda151db452fc87dd2a11b8e95b7bfacefc9cc60f751900390815590517f54cbe7b31e794ce2fda151db452fc87dd2a11b8e95b7bfacefc9cc60f7519004805460ff1916911515919091179055905180519293919262000267927f54cbe7b31e794ce2fda151db452fc87dd2a11b8e95b7bfacefc9cc60f751900592019062000765565b50606082015180516200028591600384019160209091019062000765565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c08201518051620002c591600684019160209091019062000765565b50905050620002f97365ce35093d037031dce8f37b790d72a4e37ae47c600162000650640100000000026401000000009004565b6040805160e0810182526001808252602080830182815284518086018652600c81527f4d79457468657265756d2d3100000000000000000000000000000000000000008184015284860190815285518084018752600080825260608701919091526080860181905260a08601819052865180850190975280875260c086019690965292909452600781528251600080516020620032f98339815191529081559351600080516020620032d9833981519152805460ff191691151591909117905590518051929392620003de926000805160206200331983398151915292019062000765565b5060608201518051620003fc91600384019160209091019062000765565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c082015180516200043c91600684019160209091019062000765565b509050506200047073d33cc2d4c8d85298e1fb36b26e0d0bdb34572271600262000650640100000000026401000000009004565b6040805160e081018252600281526001602080830182815284518086018652600c81527f4d79457468657265756d2d3100000000000000000000000000000000000000008184015284860190815285518087018752600b81527f6d796f776e65726c6f636b00000000000000000000000000000000000000000081850152606086015260006080860181905260a08601819052865180850190975280875260c086019690965292909452600781528251600080516020620032f98339815191529081559351600080516020620032d9833981519152805460ff19169115159190911790559051805192939262000579926000805160206200331983398151915292019062000765565b50606082015180516200059791600384019160209091019062000765565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c08201518051620005d791600684019160209091019062000765565b5090505050506200080a565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200061357600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b600160a060020a03821615156200066657600080fd5b6200067b8282640100000000620006b7810204565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600081815260016020526040902054600160a060020a031615620006da57600080fd5b60008181526001602081815260408084208054600160a060020a031916600160a060020a03881690811790915584526003909152909120546200072b916401000000006200074b8102620028c71704565b600160a060020a0390921660009081526003602052604090209190915550565b6000828201838110156200075e57600080fd5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620007a857805160ff1916838001178555620007d8565b82800160010185558215620007d8579182015b82811115620007d8578251825591602001919060010190620007bb565b50620007e6929150620007ea565b5090565b6200080791905b80821115620007e65760008155600101620007f1565b90565b612abf806200081a6000396000f3006080604052600436106101695763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461016e57806302d05d3f146101b957806306fdde03146101ea578063081812fc14610274578063095ea7b31461028c5780631aeecca7146102b257806323b872dd146102ca57806342842e0e146102f4578063576f7ea71461031e5780636352211e14610443578063662abef61461045b57806368bc2287146104c65780636a2f38a914610524578063704f2ae61461064a57806370a0823114610734578063911478c31461075557806394bf804d1461087b57806395d89b411461089f578063a22cb465146108b4578063a3f7e3a0146108da578063b88d4fde1461097c578063c4732295146108da578063c47f0027146109eb578063d1f20c5f14610a44578063e985e9c514610a9d578063ec0858b214610a44578063f19a0b5414610ac4578063fd922a4214610ae5575b600080fd5b34801561017a57600080fd5b506101a57bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1960043516610afa565b604080519115158252519081900360200190f35b3480156101c557600080fd5b506101ce610b32565b60408051600160a060020a039092168252519081900360200190f35b3480156101f657600080fd5b506101ff610b41565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610239578181015183820152602001610221565b50505050905090810190601f1680156102665780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561028057600080fd5b506101ce600435610bcf565b34801561029857600080fd5b506102b0600160a060020a0360043516602435610c01565b005b3480156102be57600080fd5b506102b0600435610cb7565b3480156102d657600080fd5b506102b0600160a060020a0360043581169060243516604435610e29565b34801561030057600080fd5b506102b0600160a060020a0360043581169060243516604435610eb7565b34801561032a57600080fd5b50610336600435610ed8565b604051808615151515815260200185600160a060020a0316600160a060020a03168152602001806020018060200184151515158152602001838103835286818151815260200191508051906020019080838360005b838110156103a357818101518382015260200161038b565b50505050905090810190601f1680156103d05780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b838110156104035781810151838201526020016103eb565b50505050905090810190601f1680156104305780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390f35b34801561044f57600080fd5b506101ce6004356110ce565b34801561046757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526104b49436949293602493928401919081908401838280828437509497506110fc9650505050505050565b60408051918252519081900360200190f35b3480156104d257600080fd5b5060408051602060046024803582810135601f81018590048502860185019096528585526102b095833595369560449491939091019190819084018382808284375094975061110d9650505050505050565b34801561053057600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102b0948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506111839650505050505050565b34801561065657600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102b0948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050933594506112cf9350505050565b34801561074057600080fd5b506104b4600160a060020a0360043516611679565b34801561076157600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102b0948035946024803595600160a060020a0360443516953695608494930191819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506116ac9650505050505050565b34801561088757600080fd5b506102b0600435600160a060020a03602435166119b2565b3480156108ab57600080fd5b506101ff611b56565b3480156108c057600080fd5b506102b0600160a060020a03600435166024351515611bb1565b3480156108e657600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101a594369492936024939284019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a99988101979196509182019450925082915084018382808284375094975050509235600160a060020a03169350611c3592505050565b34801561098857600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102b094600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750611d1f9650505050505050565b3480156109f757600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526102b0943694929360249392840191908190840183828082843750949750611d419650505050505050565b348015610a5057600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526101ff943694929360249392840191908190840183828082843750949750611d589650505050505050565b348015610aa957600080fd5b506101a5600160a060020a0360043581169060243516611d5b565b348015610ad057600080fd5b506102b0600160a060020a0360043516611d89565b348015610af157600080fd5b506101ce611dcf565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19811660009081526020819052604090205460ff165b919050565b600854600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bc75780601f10610b9c57610100808354040283529160200191610bc7565b820191906000526020600020905b815481529060010190602001808311610baa57829003601f168201915b505050505081565b6000610bda82611dde565b1515610be557600080fd5b50600090815260026020526040902054600160a060020a031690565b6000610c0c826110ce565b9050600160a060020a038381169082161415610c2757600080fd5b33600160a060020a0382161480610c435750610c438133611d5b565b1515610c4e57600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b610cc081611dde565b15610cce57610cce81611dfb565b610cec7365ce35093d037031dce8f37b790d72a4e37ae47c82611e72565b6040805160e0810182528281526001602080830182815284518086018652600c81527f4d79457468657265756d2d3100000000000000000000000000000000000000008184015284860190815285518087018752600b81527f6d796f776e65726c6f636b00000000000000000000000000000000000000000081850152606086015260006080860181905260a086018190528651808501885281815260c08701528781526007845295909520845181559051928101805460ff1916931515939093179092559251805192939192610dc99260028501920190612986565b5060608201518051610de5916003840191602090910190612986565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c08201518051610e23916006840191602090910190612986565b50505050565b610e333382611ecd565b1515610e3e57600080fd5b600160a060020a0382161515610e5357600080fd5b610e5d8382611f2c565b610e678382611f9b565b610e718282612031565b8082600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b610ed38383836020604051908101604052806000815250611d1f565b505050565b6000806060806000610ee986611dde565b15611047576001610ef9876110ce565b60008881526007602090815260409182902060048101546002808301805486516101006001831615026000190190911692909204601f81018690048602830186019096528582529460039093019360ff909216929091859190830182828015610fa35780601f10610f7857610100808354040283529160200191610fa3565b820191906000526020600020905b815481529060010190602001808311610f8657829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156110315780601f1061100657610100808354040283529160200191611031565b820191906000526020600020905b81548152906001019060200180831161101457829003601f168201915b50505050509150945094509450945094506110c5565b600086815260076020908152604080832060048101546002808301805485516101006001831615026000190190911692909204601f81018790048702830187019095528482528695909460039094019360ff909316928591830182828015610fa35780601f10610f7857610100808354040283529160200191610fa3565b91939590929450565b600081815260016020526040812054600160a060020a03168015156110f257600080fd5b8091505b50919050565b6000611107826120c1565b92915050565b60008281526007602052604090206001015460ff16151561112d57600080fd5b61113682611dde565b151561114157600080fd5b3361114b836110ce565b600160a060020a03161461115e57600080fd5b60008281526007602090815260409091208251610ed392600390920191840190612986565b60008681526007602052604090206001015460ff1680156111b5575060008681526007602052604090206004015460ff165b15156111c057600080fd5b600760008781526020019081526020016000206005015460001916816040516020018082805190602001908083835b6020831061120e5780518252601f1990920191602091820191016111ef565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106112715780518252601f199092019160209182019101611252565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156112ae57600080fd5b50505060009283525050600760205260409020600401805460ff1916905550565b600954600160a060020a031633146112e657600080fd5b60008681526007602052604090206001015460ff16151561130657600080fd5b60008681526007602052604090206004015460ff161561132557600080fd5b604080516020818101835260008083528981526007825283902060030180548451601f600260001961010060018616150201909316929092049182018490048402810184019095528085526113d994928301828280156113c65780601f1061139b576101008083540402835291602001916113c6565b820191906000526020600020905b8154815290600101906020018083116113a957829003601f168201915b50505050506120c890919063ffffffff16565b156113e357600080fd5b60008681526007602090815260409182902060030180548351601f60026000196101006001861615020190931692909204918201849004840281018401909452808452611490939283018282801561147c5780601f106114515761010080835404028352916020019161147c565b820191906000526020600020905b81548152906001019060200180831161145f57829003601f168201915b50505050508461148b896110ce565b611c35565b151561149b57600080fd5b8660011415611577576114ad86611dde565b15156114b857600080fd5b600086815260076020526040902060048101805460ff191660011790556005018190556114ec6114e7876110ce565b612291565b600760008881526020019081526020016000206006019080519060200190611515929190612986565b5061151f86611dfb565b604080518082018252600181527f4600000000000000000000000000000000000000000000000000000000000000602080830191825260008a815260079091529290922090516115759260029092019190612986565b505b86600214156116415761158986611dde565b1561159357600080fd5b600086815260076020526040902060048101805460ff1916600190811790915560058201839055600280830180546115de946006019391929181161561010002600019011604612a04565b506115e9868661240c565b604080518082018252600181527f4500000000000000000000000000000000000000000000000000000000000000602080830191825260008a8152600790915292909220905161163f9260029092019190612986565b505b60408051602081810180845260008084528a81526007909252929020905161166f9260039092019190612986565b5050505050505050565b6000600160a060020a038216151561169057600080fd5b50600160a060020a031660009081526003602052604090205490565b60008681526007602052604081206001015460ff1680156116de575060008781526007602052604090206004015460ff165b15156116e957600080fd5b600760008881526020019081526020016000206005015460001916826040516020018082805190602001908083835b602083106117375780518252601f199092019160209182019101611718565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061179a5780518252601f19909201916020918201910161177b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415156117d757600080fd5b876002141561186e576117e987611dde565b15156117f457600080fd5b6117fd87611dfb565b604080518082018252600181527f4600000000000000000000000000000000000000000000000000000000000000602080830191825260008b815260079091529290922090516118539260029092019190612986565b506000878152600760205260409020600401805460ff191690555b876001141561166f5761188087611dde565b1561188a57600080fd5b60008781526007602090815260409182902060060180548351601f6002600019610100600186161502019093169290920491820184900484028101840190945280845261192d93928301828280156119235780601f106118f857610100808354040283529160200191611923565b820191906000526020600020905b81548152906001019060200180831161190657829003601f168201915b505050505061243e565b9050611939878261240c565b604080518082018252600181527f4500000000000000000000000000000000000000000000000000000000000000602080830191825260008b8152600790915292909220905161198f9260029092019190612986565b505050600094855250506007602052505060409020600401805460ff1916905550565b6119bb82611dde565b156119c557600080fd5b600160a060020a03811615156119da57600080fd5b60008281526007602052604090206001015460ff16156119f957600080fd5b611a038183611e72565b6040805160e0810182528381526001602080830182815284518086018652600c81527f4d79457468657265756d2d3100000000000000000000000000000000000000008184015284860190815285518084018752600080825260608701919091526080860181905260a086018190528651808501885281815260c08701528881526007845295909520845181559051928101805460ff1916931515939093179092559251805192939192611abd9260028501920190612986565b5060608201518051611ad9916003840191602090910190612986565b50608082015160048201805460ff191691151591909117905560a0820151600582015560c08201518051611b17916006840191602090910190612986565b5050604051839150600160a060020a0383169033907fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f890600090a45050565b6006805460408051602060026001851615610100026000190190941693909304601f81018490048402820184019092528181529291830182828015610bc75780601f10610b9c57610100808354040283529160200191610bc7565b600160a060020a038216331415611bc757600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600081600160a060020a0316611d0d856040516020018082805190602001908083835b60208310611c775780518252601f199092019160209182019101611c58565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611cda5780518252601f199092019160209182019101611cbb565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902085612659565b600160a060020a031614949350505050565b611d2a848484610e29565b611d368484848461272e565b1515610e2357600080fd5b8051611d54906005906020840190612986565b5050565b90565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600854600160a060020a03163314611da057600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600954600160a060020a031681565b600090815260016020526040902054600160a060020a0316151590565b6000611e06826110ce565b9050611e11826110ce565b6000838152600260209081526040808320805473ffffffffffffffffffffffffffffffffffffffff19908116909155600160a060020a0390941683526003825280832080546000190190559482526001905292909220805490921690915550565b600160a060020a0382161515611e8757600080fd5b611e918282612031565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b600080611ed9836110ce565b905080600160a060020a031684600160a060020a03161480611f14575083600160a060020a0316611f0984610bcf565b600160a060020a0316145b80611f245750611f248185611d5b565b949350505050565b81600160a060020a0316611f3f826110ce565b600160a060020a031614611f5257600080fd5b600081815260026020526040902054600160a060020a031615611d54576000908152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff1916905550565b81600160a060020a0316611fae826110ce565b600160a060020a031614611fc157600080fd5b600160a060020a038216600090815260036020526040902054611feb90600163ffffffff6128b016565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b600081815260016020526040902054600160a060020a03161561205357600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03881690811790915584526003909152909120546120a1916128c7565b600160a060020a0390921660009081526003602052604090209190915550565b6020015190565b6000806000846040516020018080602001828103825283818151815260200191508051906020019080838360005b8381101561210e5781810151838201526020016120f6565b50505050905090810190601f16801561213b5780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040526040518082805190602001908083835b6020831061217e5780518252601f19909201916020918201910161215f565b51815160001960209485036101000a01908116901991909116179052604080519490920184900384208482018281528b51938601939093528a519098508a96509194508493606001925085019080838360005b838110156121e95781810151838201526020016121d1565b50505050905090810190601f1680156122165780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040526040518082805190602001908083835b602083106122595780518252601f19909201916020918201910161223a565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912094909414979650505050505050565b60408051602a80825260608083019093526c010000000000000000000000008402918391600091829160208201610540803883390190505092507f30000000000000000000000000000000000000000000000000000000000000008360008151811015156122fb57fe5b906020010190600160f860020a031916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000083600181518110151561234357fe5b906020010190600160f860020a031916908160001a905350600091505b60148210156124025783826014811061237557fe5b60f860020a91901a8102049050612394600f601060ff841604166128e0565b835184906002808602019081106123a757fe5b906020010190600160f860020a031916908160001a9053506123cb81600f166128e0565b83518490600360028602019081106123df57fe5b906020010190600160f860020a031916908160001a905350600190910190612360565b5090949350505050565b61241582611dde565b1561241f57600080fd5b600160a060020a038116151561243457600080fd5b611d548183611e72565b600060606000806000806000806000808a985060278951101580156124655750602a895111155b15156124d257604080517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f742068657820737472696e67000000000000000000000000000000000000604482015290519081900360640190fd5b60009750600096508860018151811015156124e957fe5b90602001015160f860020a900460f860020a02600160f860020a0319167f7800000000000000000000000000000000000000000000000000000000000000148061257d575088600181518110151561253d57fe5b90602001015160f860020a900460f860020a02600160f860020a0319167f5800000000000000000000000000000000000000000000000000000000000000145b1561258757600297505b6000955087895103945084602714156125d757885160018901986125c8918b919081106125b057fe5b90602001015160f860020a900460f860020a0261291b565b60019097019660ff1695909501945b8693505b601484101561264a57600886600160a060020a03169060020a02955061260889898151811015156125b057fe5b925061261e89896001018151811015156125b057fe5b91508160048460ff169060020a020190508060ff168601955060028801975083806001019450506125db565b50939998505050505050505050565b600080600080845160411415156126735760009350612725565b50505060208201516040830151606084015160001a601b60ff8216101561269857601b015b8060ff16601b141580156126b057508060ff16601c14155b156126be5760009350612725565b60408051600080825260208083018085528a905260ff8516838501526060830187905260808301869052925160019360a0808501949193601f19840193928390039091019190865af1158015612718573d6000803e3d6000fd5b5050506020604051035193505b50505092915050565b60008061274385600160a060020a031661297e565b151561275257600191506128a7565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156127e55781810151838201526020016127cd565b50505050905090810190601f1680156128125780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561283457600080fd5b505af1158015612848573d6000803e3d6000fd5b505050506040513d602081101561285e57600080fd5b50517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b600080838311156128c057600080fd5b5050900390565b6000828201838110156128d957600080fd5b9392505050565b6000808260ff16101580156128f9575060098260ff1611155b1561290e575060f860020a6030820102610b2d565b5060570160f860020a0290565b600060f860020a8204603060ff82161080159061293c575060398160ff1611155b1561294c576030810391506110f6565b60418160ff1610158015612964575060468160ff1611155b15612974576037810391506110f6565b6056190192915050565b6000903b1190565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106129c757805160ff19168380011785556129f4565b828001600101855582156129f4579182015b828111156129f45782518255916020019190600101906129d9565b50612a00929150612a79565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a3d57805485556129f4565b828001600101855582156129f457600052602060002091601f016020900482015b828111156129f4578254825591600101919060010190612a5e565b611d5891905b80821115612a005760008155600101612a7f5600a165627a7a7230582093049f6327a78a50d7280ec7f3bbb2ba50a26918d48b3edc4bbc102ca542a8390029b39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b829b39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b828b39221ace053465ec3453ce2b36430bd138b997ecea25c1043da0c366812b82a";

    protected CrossChainNFT_sol_CrossChainNFT(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected CrossChainNFT_sol_CrossChainNFT(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<CrossChainTransferEventResponse> getCrossChainTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("CrossChainTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CrossChainTransferEventResponse> responses = new ArrayList<CrossChainTransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CrossChainTransferEventResponse typedResponse = new CrossChainTransferEventResponse();
            typedResponse.from = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (byte[]) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.crossChaintype = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CrossChainTransferEventResponse> crossChainTransferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("CrossChainTransfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CrossChainTransferEventResponse>() {
            @Override
            public CrossChainTransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CrossChainTransferEventResponse typedResponse = new CrossChainTransferEventResponse();
                typedResponse.from = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (byte[]) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.crossChaintype = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<MintEventResponse> getMintEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<MintEventResponse> responses = new ArrayList<MintEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            MintEventResponse typedResponse = new MintEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<MintEventResponse> mintEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Mint", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, MintEventResponse>() {
            @Override
            public MintEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                MintEventResponse typedResponse = new MintEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<TransferEventResponse> getTransferEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<TransferEventResponse> responses = new ArrayList<TransferEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            TransferEventResponse typedResponse = new TransferEventResponse();
            typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<TransferEventResponse> transferEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Transfer", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, TransferEventResponse>() {
            @Override
            public TransferEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                TransferEventResponse typedResponse = new TransferEventResponse();
                typedResponse.from = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.to = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalEventResponse> getApprovalEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ApprovalEventResponse> responses = new ArrayList<ApprovalEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ApprovalEventResponse typedResponse = new ApprovalEventResponse();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalEventResponse> approvalEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("Approval", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}),
                Arrays.<TypeReference<?>>asList());
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalEventResponse>() {
            @Override
            public ApprovalEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApprovalEventResponse typedResponse = new ApprovalEventResponse();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.approved = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenId = (BigInteger) eventValues.getIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ApprovalForAllEventResponse> getApprovalForAllEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ApprovalForAll", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ApprovalForAllEventResponse> responses = new ArrayList<ApprovalForAllEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
            typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ApprovalForAllEventResponse> approvalForAllEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ApprovalForAll", 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ApprovalForAllEventResponse>() {
            @Override
            public ApprovalForAllEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ApprovalForAllEventResponse typedResponse = new ApprovalForAllEventResponse();
                typedResponse.owner = (String) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.operator = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.approved = (Boolean) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<Boolean> supportsInterface(byte[] interfaceId) {
        Function function = new Function("supportsInterface", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes4(interfaceId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<String> creator() {
        Function function = new Function("creator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> name() {
        Function function = new Function("name", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> getApproved(BigInteger tokenId) {
        Function function = new Function("getApproved", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> approve(String to, BigInteger tokenId) {
        Function function = new Function(
                "approve", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> initNFT(BigInteger _tokenId) {
        Function function = new Function(
                "initNFT", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferFrom(String from, String to, BigInteger tokenId) {
        Function function = new Function(
                "transferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId) {
        Function function = new Function(
                "safeTransferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple5<Boolean, String, String, String, Boolean>> getNFT(BigInteger _tokenId) {
        final Function function = new Function("getNFT", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Address>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Bool>() {}));
        return new RemoteCall<Tuple5<Boolean, String, String, String, Boolean>>(
                new Callable<Tuple5<Boolean, String, String, String, Boolean>>() {
                    @Override
                    public Tuple5<Boolean, String, String, String, Boolean> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple5<Boolean, String, String, String, Boolean>(
                                (Boolean) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (String) results.get(3).getValue(), 
                                (Boolean) results.get(4).getValue());
                    }
                });
    }

    public RemoteCall<String> ownerOf(BigInteger tokenId) {
        Function function = new Function("ownerOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(tokenId)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<byte[]> StringToBytes32Test(String _in) {
        Function function = new Function("StringToBytes32Test", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_in)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> setOwnerLock(BigInteger _tokenId, String _lock) {
        Function function = new Function(
                "setOwnerLock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Utf8String(_lock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> crossChainTransfer_unlock(BigInteger _type, BigInteger _tokenId, String _addr, String _msp, byte[] _signature, String _invokeId, String _hashKey) {
        Function function = new Function(
                "crossChainTransfer_unlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_type), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Address(_addr), 
                new org.web3j.abi.datatypes.Utf8String(_msp), 
                new org.web3j.abi.datatypes.DynamicBytes(_signature), 
                new org.web3j.abi.datatypes.Utf8String(_invokeId), 
                new org.web3j.abi.datatypes.Utf8String(_hashKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> crossChainTransfer_lock_do(BigInteger _type, BigInteger _tokenId, String _addr, String _msp, byte[] _signature, String _invokeId, byte[] _lockHash) {
        Function function = new Function(
                "crossChainTransfer_lock_do", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_type), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Address(_addr), 
                new org.web3j.abi.datatypes.Utf8String(_msp), 
                new org.web3j.abi.datatypes.DynamicBytes(_signature), 
                new org.web3j.abi.datatypes.Utf8String(_invokeId), 
                new org.web3j.abi.datatypes.generated.Bytes32(_lockHash)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> balanceOf(String owner) {
        Function function = new Function("balanceOf", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> crossChainTransfer_undo_unlock(BigInteger _type, BigInteger _tokenId, String _addr, String _msp, byte[] _signature, String _invokeId, String _hashKey) {
        Function function = new Function(
                "crossChainTransfer_undo_unlock", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Int256(_type), 
                new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Address(_addr), 
                new org.web3j.abi.datatypes.Utf8String(_msp), 
                new org.web3j.abi.datatypes.DynamicBytes(_signature), 
                new org.web3j.abi.datatypes.Utf8String(_invokeId), 
                new org.web3j.abi.datatypes.Utf8String(_hashKey)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> mint(BigInteger _tokenId, String _to) {
        Function function = new Function(
                "mint", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_tokenId), 
                new org.web3j.abi.datatypes.Address(_to)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> symbol() {
        Function function = new Function("symbol", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setApprovalForAll(String to, Boolean approved) {
        Function function = new Function(
                "setApprovalForAll", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.Bool(approved)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verifySignPublic(String _plainText, byte[] _signature, String _addr) {
        Function function = new Function("verifySignPublic", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_plainText), 
                new org.web3j.abi.datatypes.DynamicBytes(_signature), 
                new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> safeTransferFrom(String from, String to, BigInteger tokenId, byte[] _data) {
        Function function = new Function(
                "safeTransferFrom", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(from), 
                new org.web3j.abi.datatypes.Address(to), 
                new org.web3j.abi.datatypes.generated.Uint256(tokenId), 
                new org.web3j.abi.datatypes.DynamicBytes(_data)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Boolean> verifySignPublicString(String _plainText, String _signature, String _addr) {
        Function function = new Function("verifySignPublicString", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_plainText), 
                new org.web3j.abi.datatypes.Utf8String(_signature), 
                new org.web3j.abi.datatypes.Address(_addr)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<TransactionReceipt> setName(String newName) {
        Function function = new Function(
                "setName", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(newName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> BytesToStringTest(byte[] _in) {
        Function function = new Function("BytesToStringTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicBytes(_in)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Boolean> isApprovedForAll(String owner, String operator) {
        Function function = new Function("isApprovedForAll", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(owner), 
                new org.web3j.abi.datatypes.Address(operator)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> StringToBytesTest(String _in) {
        Function function = new Function("StringToBytesTest", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_in)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<TransactionReceipt> setServer(String _server) {
        Function function = new Function(
                "setServer", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(_server)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> server() {
        Function function = new Function("server", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<CrossChainNFT_sol_CrossChainNFT> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)));
        return deployRemoteCall(CrossChainNFT_sol_CrossChainNFT.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static RemoteCall<CrossChainNFT_sol_CrossChainNFT> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String _name, String _symbol) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_name), 
                new org.web3j.abi.datatypes.Utf8String(_symbol)));
        return deployRemoteCall(CrossChainNFT_sol_CrossChainNFT.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    public static CrossChainNFT_sol_CrossChainNFT load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrossChainNFT_sol_CrossChainNFT(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static CrossChainNFT_sol_CrossChainNFT load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new CrossChainNFT_sol_CrossChainNFT(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class CrossChainTransferEventResponse {
        public byte[] from;

        public byte[] to;

        public BigInteger tokenId;

        public BigInteger crossChaintype;
    }

    public static class MintEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class TransferEventResponse {
        public String from;

        public String to;

        public BigInteger tokenId;
    }

    public static class ApprovalEventResponse {
        public String owner;

        public String approved;

        public BigInteger tokenId;
    }

    public static class ApprovalForAllEventResponse {
        public String owner;

        public String operator;

        public Boolean approved;
    }
}
