package com.chen.crossTest.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class ServContract_sol_ServContract extends Contract {
    private static final String BINARY = "608060405260038055670de0b6b3a7640000600555600a6006556003600a556002600b55620f4240600c55621e8480600d55600060125560006014556005546006540260155566b1a2bc2ec50000601655601554601755662386f26fc10000601b556702c68af0bb140000601c556000601f5567011c37937e080000602055600060225567011c37937e08000060235567016345785d8a0000602455600060255560405160c080620033738339810180604052620000c19190810190620002d3565b60138054600160a060020a03868116600160a060020a031992831617909255601e805486841690831617905560008054600180548a86169085168117825560028054909516179093556014869055601d8590559289166101000261010060a860020a03199093169290921760ff1916825560048054918201808255925260408051808201909152600c8082527f4d79457468657265756d2d31000000000000000000000000000000000000000060209092019182526200019492600080516020620033538339815191520191906200020b565b5050600480546001810180835560009290925260408051808201909152600a8082527f4d794661627269632d31000000000000000000000000000000000000000000006020909201918252620001fd92600080516020620033538339815191520191906200020b565b505050505050505062000373565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200024e57805160ff19168380011785556200027e565b828001600101855582156200027e579182015b828111156200027e57825182559160200191906001019062000261565b506200028c92915062000290565b5090565b620002ad91905b808211156200028c576000815560010162000297565b90565b6000620002be825162000367565b9392505050565b6000620002be8251620002ad565b60008060008060008060c08789031215620002ed57600080fd5b6000620002fb8989620002b0565b96505060206200030e89828a01620002b0565b95505060406200032189828a01620002b0565b94505060606200033489828a01620002b0565b93505060806200034789828a01620002c5565b92505060a06200035a89828a01620002c5565b9150509295509295509295565b600160a060020a031690565b612fd080620003836000396000f3006080604052600436106102375763ffffffff60e060020a60003504166301c55829811461023957806304daeabf146102645780630c62195c14610286578063109e94cf146102a857806312065fe0146102bd57806319ad5c1c146102d25780631e1be781146102e757806321d93090146102fc578063350044321461031c5780633551e87614610331578063498cc70d146103445780634aef8036146103645780634fe13ae714610384578063533bafc9146103a457806359f74607146103d35780635c8a1053146103e85780636541510314610408578063676719ea1461042857806367f239dd1461043d5780636d392b761461045f5780636d719d851461048e5780637089ae97146104a3578063764618eb146104b8578063877ba5e8146104cd5780639181a2ba146104e2578063978cf992146104f7578063a6b77b6b1461050c578063af99335e14610539578063b71952a814610559578063b8cb21c614610579578063c1bbaf351461058e578063c389175614610596578063c7304995146105ab578063c948202d146105c0578063ce5e68e3146105e0578063cf69a90e146105f5578063d0e30db01461060a578063d7dffce014610612578063db42f23314610634578063dc1fb5a514610654578063e1bf512d14610669578063e6ed05421461067e578063ee148ba11461069e578063efb264ef146106b3578063f0ebde06146106c8578063f4e20dc1146106dd578063f6c32bb2146106f2578063fae67d4014610707578063fd922a421461071c575b005b34801561024557600080fd5b5061024e610731565b60405161025b9190612c68565b60405180910390f35b34801561027057600080fd5b50610279610740565b60405161025b9190612d93565b34801561029257600080fd5b5061029b610746565b60405161025b9190612d11565b3480156102b457600080fd5b5061024e6107d4565b3480156102c957600080fd5b506102796107e3565b3480156102de57600080fd5b506102796107e9565b3480156102f357600080fd5b506102796107ef565b34801561030857600080fd5b5061029b610317366004612a42565b6107f5565b34801561032857600080fd5b50610279610869565b61023761033f366004612a42565b61086f565b34801561035057600080fd5b5061029b61035f3660046128b1565b610974565b34801561037057600080fd5b5061024e61037f366004612a42565b610a9f565b34801561039057600080fd5b5061023761039f3660046128b1565b610ac7565b3480156103b057600080fd5b506103c46103bf366004612791565b610da2565b60405161025b93929190612ccd565b3480156103df57600080fd5b50610279610dd1565b3480156103f457600080fd5b506102376104033660046128b1565b610dd7565b34801561041457600080fd5b50610237610423366004612a42565b610fbb565b34801561043457600080fd5b50610279610fdf565b34801561044957600080fd5b50610452610fe5565b60405161025b9190612cf5565b34801561046b57600080fd5b5061047f61047a366004612997565b610ff4565b60405161025b93929190612d22565b34801561049a57600080fd5b5061024e611175565b3480156104af57600080fd5b50610279611184565b3480156104c457600080fd5b5061027961118a565b3480156104d957600080fd5b50610279611190565b3480156104ee57600080fd5b50610279611196565b34801561050357600080fd5b5061027961119c565b34801561051857600080fd5b5061052c6105273660046128b1565b6111a2565b60405161025b9190612cbf565b34801561054557600080fd5b506102376105543660046129e8565b611349565b34801561056557600080fd5b50610237610574366004612821565b6114b3565b34801561058557600080fd5b50610279611646565b61023761164c565b3480156105a257600080fd5b50610279611876565b3480156105b757600080fd5b5061027961187c565b3480156105cc57600080fd5b506102796105db366004612791565b611882565b3480156105ec57600080fd5b506102796118a0565b34801561060157600080fd5b506102796118a6565b6102796118ac565b34801561061e57600080fd5b506106276118fc565b60405161025b9190612d03565b34801561064057600080fd5b5061024e61064f366004612a42565b611905565b34801561066057600080fd5b50610452611913565b34801561067557600080fd5b50610279611927565b34801561068a57600080fd5b5061023761069936600461291b565b61192d565b3480156106aa57600080fd5b50610279612335565b3480156106bf57600080fd5b5061027961233b565b3480156106d457600080fd5b50610279612341565b3480156106e957600080fd5b50610279612347565b3480156106fe57600080fd5b5061027961234d565b34801561071357600080fd5b50610279612353565b34801561072857600080fd5b5061024e612359565b600254600160a060020a031681565b60235481565b6007805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156107cc5780601f106107a1576101008083540402835291602001916107cc565b820191906000526020600020905b8154815290600101906020018083116107af57829003601f168201915b505050505081565b602154600160a060020a031681565b30315b90565b60095481565b60155481565b600480548290811061080357fe5b600091825260209182902001805460408051601f60026000196101006001871615020190941693909304928301859004850281018501909152818152935090918301828280156107cc5780601f106107a1576101008083540402835291602001916107cc565b600a5481565b6000805460ff191660011781555b6019548110156108e7576018600060198381548110151561089a57fe5b6000918252602080832090910154600160a060020a031683528201929092526040018120805462ffffff1916815560018101829055906108dd6002830182612368565b505060010161087d565b6108f3601960006123af565b6108ff601a60006123af565b6000600e8190556010819055601181905567011c37937e080000601f55678ac7230489e80000601455600f81905560038390556040513391678be35a9807efffff1930310180156108fc02929091818181858888f1935050505015801561096a573d6000803e3d6000fd5b5050600060255550565b606060048060005460ff16600481111561098a57fe5b1461099457600080fd5b600254600160a060020a031633146109ab57600080fd5b6027836040518082805190602001908083835b602083106109dd5780518252601f1990920191602091820191016109be565b518151600019602094850361010090810a820192831692199390931691909117909252949092019687526040805197889003820188208054601f6002600183161590980290950116959095049283018290048202880182019052818752929450925050830182828015610a915780601f10610a6657610100808354040283529160200191610a91565b820191906000526020600020905b815481529060010190602001808311610a7457829003601f168201915b505050505091505b50919050565b601a805482908110610aad57fe5b600091825260209091200154600160a060020a0316905081565b60008160076040518082805460018160011615610100020316600290048015610b275780601f10610b05576101008083540402835291820191610b27565b820191906000526020600020905b815481529060010190602001808311610b13575b50506040519081900381208451909350849250819060208401908083835b60208310610b645780518252601f199092019160209182019101610b45565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610ba157600080fd5b600d5460095401438110610bb457600080fd5b6024546020546005540101601d54601254021115610d9c57601654601480548201905560258054919091039055600092505b601a54831015610ce457601d54601b540160186000601a86815481101515610c0a57fe5b6000918252602080832090910154600160a060020a03908116845290830193909352604090910181206001018054909301909255601d54601b546025805491909201900390559054601a80546101009092049092169163786a03f49186908110610c7057fe5b60009182526020909120015460405160e060020a63ffffffff8416028152610ca691600160a060020a0316906004908101612ca4565b600060405180830381600087803b158015610cc057600080fd5b505af1158015610cd4573d6000803e3d6000fd5b505060019094019350610be69050565b600554601f805482019055602580546022805493909103909201909155600090819055805460ff19166004908117918290556013546040517f9d24ae6e000000000000000000000000000000000000000000000000000000008152610100909304600160a060020a0390811693639d24ae6e93610d6993929092169160039101612ca4565b600060405180830381600087803b158015610d8357600080fd5b505af1158015610d97573d6000803e3d6000fd5b505050505b50505050565b600160a060020a03166000908152601860205260409020805460019091015460ff808316936101009093041691565b60255481565b8060076040518082805460018160011615610100020316600290048015610e355780601f10610e13576101008083540402835291820191610e35565b820191906000526020600020905b815481529060010190602001808311610e21575b50506040519081900381208451909350849250819060208401908083835b60208310610e725780518252601f199092019160209182019101610e53565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515610eaf57600080fd5b600d5460095401438110610ec257600080fd5b610ece601960006123af565b601a54600a54036012819055600054601354601e546021546040517fed1dd012000000000000000000000000000000000000000000000000000000008152600160a060020a0361010090950485169563ed1dd01295610f4195919491811693918116929116906007906004908101612e08565b600060405180830381600087803b158015610f5b57600080fd5b505af1158015610f6f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f9791908101906127b7565b8051610fab916019916020909101906123cd565b5050600d80546103e80190555050565b60048060005460ff166004811115610fcf57fe5b14610fd957600080fd5b50600355565b60145481565b600154600160a060020a031681565b60606000806026856040518082805190602001908083835b6020831061102b5780518252601f19909201916020918201910161100c565b51815160209384036101000a600019018019909216911617905292019485525060408051948590038201852060008a81529083522089519094899450602693508a92909182918401908083835b602083106110975780518252601f199092019160209182019101611078565b518151600019602094850361010090810a8201928316921993909316919091179092529490920196875260408051978890038201882060008f81529083528190206001908101548b54601f60029382161590980290950190941604948501829004820288018201905283875260ff90911695945087935084019050828280156111615780601f1061113657610100808354040283529160200191611161565b820191906000526020600020905b81548152906001019060200180831161114457829003601f168201915b505050505092509250925092509250925092565b601e54600160a060020a031681565b601b5481565b60115481565b60165481565b60245481565b60175481565b6000600d546009540180431115156111b957600080fd5b601354600160a060020a0316331415611218576014546000106111db57600080fd5b601454604051339180156108fc02916000818181858888f19350505050158015611209573d6000803e3d6000fd5b50600060145560019150610a99565b601e54600160a060020a031633141561127757601f5460001061123a57600080fd5b601f54604051339180156108fc02916000818181858888f19350505050158015611268573d6000803e3d6000fd5b506000601f5560019150610a99565b602154600160a060020a03163314156112d65760225460001061129957600080fd5b602254604051339180156108fc02916000818181858888f193505050501580156112c7573d6000803e3d6000fd5b50600060225560019150610a99565b336000908152601860205260408120600101541115610a99573360008181526018602052604080822060010154905181156108fc0292818181858888f19350505050158015611329573d6000803e3d6000fd5b503360009081526018602052604081206001908101919091559150610a99565b601354600160a060020a0316331461136057600080fd5b60028060005460ff16600481111561137457fe5b1461137e57600080fd5b604080518082019091528481526020810160008152506026600760405180828054600181600116156101000203166002900480156113f35780601f106113d15761010080835404028352918201916113f3565b820191906000526020600020905b8154815290600101906020018083116113df575b5050928352505060408051602092819003830190206000878152908352208251805191926114269284929091019061243f565b50602082015160018083018054909160ff199091169083600281111561144857fe5b021790555050600f80546001019081905560035414159050610d9c576000805460ff1916600317905543600e8190556040517fcefcfb1e62c5dcefa25c09e8fc7eebb3cf837b8d4501e872c810f8e1ec5c7337916114a591612d93565b60405180910390a150505050565b60018060005460ff1660048111156114c757fe5b146114d157600080fd5b600254600160a060020a031633146114e857600080fd5b60175460145410156114f957600080fd5b602054601f54101561150a57600080fd5b600054600a54601354601e546040517fed1dd012000000000000000000000000000000000000000000000000000000008152600160a060020a0361010090950485169463ed1dd0129461156e949093908216929116908a9089908d90600401612da1565b600060405180830381600087803b15801561158857600080fd5b505af115801561159c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115c491908101906127b7565b80516115d8916019916020909101906123cd565b5081516115ec90600790602085019061243f565b506021805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038616179055600080546002919060ff1916600183021790555050601d54600a540260255550436009556022805490910190555050565b600d5481565b60008060005460ff16600481111561166057fe5b1461166a57600080fd5b601e54600160a060020a0316331461168157600080fd5b6020543481111561169157600080fd5b601f8054340190556001546000546013546040517f5debbe37000000000000000000000000000000000000000000000000000000008152600160a060020a0393841693635debbe37936116f593610100909104821692309290911690600401612c7c565b600060405180830381600087803b15801561170f57600080fd5b505af1158015611723573d6000803e3d6000fd5b50505050600160009054906101000a9004600160a060020a0316600160a060020a0316632a01ff756040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561177a57600080fd5b505af115801561178e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506117b29190810190612a60565b600355600154604080517f1d7763230000000000000000000000000000000000000000000000000000000081529051600160a060020a0390921691631d7763239160048082019260009290919082900301818387803b15801561181457600080fd5b505af1158015611828573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261185091908101906127ec565b8051611864916004916020909101906124b9565b50506000805460ff1916600117905550565b601c5481565b600b5481565b600160a060020a031660009081526018602052604090206001015490565b60205481565b600c5481565b601354600090600160a060020a03163314156118d25750601480543401908190556107e6565b601e54600160a060020a03163314156118f65750601f8054340190556014546107e6565b50600090565b60005460ff1681565b6019805482908110610aad57fe5b6000546101009004600160a060020a031681565b60105481565b60008060038060005460ff16600481111561194457fe5b1461194e57600080fd5b85600760405180828054600181600116156101000203166002900480156119ac5780601f1061198a5761010080835404028352918201916119ac565b820191906000526020600020905b815481529060010190602001808311611998575b50506040519081900381208451909350849250819060208401908083835b602083106119e95780518252601f1990920191602091820191016119ca565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916141515611a2657600080fd5b6000805b601954811015611a6d576019805482908110611a4257fe5b600091825260209091200154600160a060020a0316331415611a65576001909101905b600101611a2a565b60008211611a7a57600080fd5b3360008181526018602052604090205460ff1615611a9757600080fd5b600d546009540143811015611aab57600080fd5b6040805160a081018252600180825260208083019182528d151583850152600060608401819052608084018e90523381526018909152929092208151815460ff19169015151780825592519192909190829061ff001916610100836005811115611b1157fe5b021790555060408201518154901515620100000262ff0000199091161781556060820151600182015560808201518051611b5591600284019160209091019061243f565b5050601a80546001810182556000919091527f057c384a7d1c54f3a1b2e5e67b2617b8224fdfd1ea7234eea573a6ff665ff63e01805473ffffffffffffffffffffffffffffffffffffffff191633179055508915611bbb57601080546001019055611bc5565b6011805460010190555b600a54601a541061232857600b5460105410611ef5576008805460ff199081166001179091556000805490911660041781556022819055601f80546016549081900390915560148054909101905597505b601a54881015611e4e5760186000601a8a815481101515611c3357fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff620100009091041615611d5d57601d54601b540160186000601a8b815481101515611c8157fe5b6000918252602080832090910154600160a060020a03908116845290830193909352604090910181206001018054909301909255601b54601f8054919091039055601d54602580549190910390559054601a80546101009092049092169163786a03f4918b908110611cef57fe5b60009182526020909120015460405160e060020a63ffffffff8416028152611d2691600160a060020a031690600390600401612ca4565b600060405180830381600087803b158015611d4057600080fd5b505af1158015611d54573d6000803e3d6000fd5b50505050611e43565b601c54601d540360186000601a8b815481101515611d7757fe5b6000918252602080832090910154600160a060020a039081168452908301939093526040909101812060010192909255601c54601d54602580549290910390910390559054601a80546101009092049092169163786a03f4918b908110611dda57fe5b60009182526020909120015460405160e060020a63ffffffff8416028152611e1091600160a060020a0316906004908101612ca4565b600060405180830381600087803b158015611e2a57600080fd5b505af1158015611e3e573d6000803e3d6000fd5b505050505b600190970196611c16565b602580546014805460029092049182019055601f80549091019055600090819055546013546040517f9d24ae6e000000000000000000000000000000000000000000000000000000008152600160a060020a03610100909304831692639d24ae6e92611ec292911690600390600401612ca4565b600060405180830381600087803b158015611edc57600080fd5b505af1158015611ef0573d6000803e3d6000fd5b505050505b600b54601054101561224c576008805460ff1990811690915560008054909116600417815560155460148054829003905560258054909101905596505b601a548710156121a65760186000601a89815481101515611f4f57fe5b6000918252602080832090910154600160a060020a0316835282019290925260400190205460ff6201000090910416151561207357601d54601b540160186000601a8a815481101515611f9e57fe5b6000918252602080832090910154600160a060020a03908116845290830193909352604090910181206001018054909301909255601b5460258054601d549290039190910390559054601a80546101009092049092169163786a03f4918b90811061200557fe5b60009182526020909120015460405160e060020a63ffffffff841602815261203c91600160a060020a031690600390600401612ca4565b600060405180830381600087803b15801561205657600080fd5b505af115801561206a573d6000803e3d6000fd5b5050505061219b565b601c54601d540360186000601a8a81548110151561208d57fe5b6000918252602080832090910154600160a060020a03168352820192909252604001812060010191909155601c54601d546025805492909103918290039055601a805491926018929091908c9081106120e257fe5b6000918252602080832090910154600160a060020a0390811684529083019390935260409091018120600101929092559054601a80546101009092049092169163786a03f4918b90811061213257fe5b60009182526020909120015460405160e060020a63ffffffff841602815261216891600160a060020a0316906004908101612ca4565b600060405180830381600087803b15801561218257600080fd5b505af1158015612196573d6000803e3d6000fd5b505050505b600190960195611f32565b60258054601f805460029092049182019055602280549091019055600090819055546013546040517f9d24ae6e000000000000000000000000000000000000000000000000000000008152600160a060020a03610100909304831692639d24ae6e92612219929116906004908101612ca4565b600060405180830381600087803b15801561223357600080fd5b505af1158015612247573d6000803e3d6000fd5b505050505b7fad2a2af5df40fe94ba3f0b553a8f8d23d0c527bdbb06310ea413e9e9d7217a1760074360405161227e929190612d73565b60405180910390a16001546040517f5537ae51000000000000000000000000000000000000000000000000000000008152600160a060020a0390911690635537ae51906122d090600790600401612d4f565b600060405180830381600087803b1580156122ea57600080fd5b505af11580156122fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261232691908101906128e6565b505b5050505050505050505050565b60225481565b601d5481565b601f5481565b600e5481565b600f5481565b60035481565b601354600160a060020a031681565b50805460018160011615610100020316600290046000825580601f1061238e57506123ac565b601f0160209004906000526020600020908101906123ac9190612512565b50565b50805460008255906000526020600020908101906123ac9190612512565b82805482825590600052602060002090810192821561242f579160200282015b8281111561242f578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039091161782556020909201916001909101906123ed565b5061243b92915061252c565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061248057805160ff19168380011785556124ad565b828001600101855582156124ad579182015b828111156124ad578251825591602001919060010190612492565b5061243b929150612512565b828054828255906000526020600020908101928215612506579160200282015b8281111561250657825180516124f691849160209091019061243f565b50916020019190600101906124d9565b5061243b92915061255d565b6107e691905b8082111561243b5760008155600101612518565b6107e691905b8082111561243b57805473ffffffffffffffffffffffffffffffffffffffff19168155600101612532565b6107e691905b8082111561243b5760006125778282612368565b50600101612563565b600061258c8235612ef3565b9392505050565b600061258c8251612ef3565b6000601f820183136125b057600080fd5b81516125c36125be82612e8a565b612e63565b915081818352602084019350602081019050838560208402820111156125e857600080fd5b60005b8381101561261457816125fe8882612593565b84525060209283019291909101906001016125eb565b5050505092915050565b6000601f8201831361262f57600080fd5b813561263d6125be82612e8a565b81815260209384019390925082018360005b83811015612614578135860161266588826126e4565b845250602092830192919091019060010161264f565b6000601f8201831361268c57600080fd5b815161269a6125be82612e8a565b81815260209384019390925082018360005b8381101561261457815186016126c28882612733565b84525060209283019291909101906001016126ac565b600061258c8235612eff565b6000601f820183136126f557600080fd5b81356127036125be82612eab565b9150808252602083016020830185838301111561271f57600080fd5b61272a838284612f54565b50505092915050565b6000601f8201831361274457600080fd5b81516127526125be82612eab565b9150808252602083016020830185838301111561276e57600080fd5b61272a838284612f60565b600061258c82356107e6565b600061258c82516107e6565b6000602082840312156127a357600080fd5b60006127af8484612580565b949350505050565b6000602082840312156127c957600080fd5b815167ffffffffffffffff8111156127e057600080fd5b6127af8482850161259f565b6000602082840312156127fe57600080fd5b815167ffffffffffffffff81111561281557600080fd5b6127af8482850161267b565b6000806000806080858703121561283757600080fd5b843567ffffffffffffffff81111561284e57600080fd5b61285a8782880161261e565b945050602061286b87828801612580565b935050604061287c87828801612779565b925050606085013567ffffffffffffffff81111561289957600080fd5b6128a5878288016126e4565b91505092959194509250565b6000602082840312156128c357600080fd5b813567ffffffffffffffff8111156128da57600080fd5b6127af848285016126e4565b6000602082840312156128f857600080fd5b815167ffffffffffffffff81111561290f57600080fd5b6127af84828501612733565b60008060006060848603121561293057600080fd5b833567ffffffffffffffff81111561294757600080fd5b612953868287016126e4565b9350506020612964868287016126d8565b925050604084013567ffffffffffffffff81111561298157600080fd5b61298d868287016126e4565b9150509250925092565b600080604083850312156129aa57600080fd5b823567ffffffffffffffff8111156129c157600080fd5b6129cd858286016126e4565b92505060206129de85828601612779565b9150509250929050565b6000806000606084860312156129fd57600080fd5b833567ffffffffffffffff811115612a1457600080fd5b612a20868287016126e4565b9350506020612a3186828701612779565b925050604061298d868287016126d8565b600060208284031215612a5457600080fd5b60006127af8484612779565b600060208284031215612a7257600080fd5b60006127af8484612785565b612a8781612ef3565b82525050565b6000612a9882612ee5565b80845260208401935083602082028501612ab185612ed3565b60005b84811015612ae8578383038852612acc838351612b7b565b9250612ad782612ed3565b602098909801979150600101612ab4565b50909695505050505050565b6000612aff82612ee9565b80845260208401935083602082028501612b1885612ed9565b60005b84811015612ae8578383038852612b328383612bb0565b9250612b3d82612eed565b602098909801979150600101612b1b565b612a8781612eff565b612a8781612f28565b612a8781612f33565b612a8781612f3e565b612a8781612f49565b6000612b8682612ee5565b808452612b9a816020860160208601612f60565b612ba381612f8c565b9093016020019392505050565b600081546001811660008114612bcd5760018114612beb57612c27565b60028204607f16855260ff1982166020860152604085019250612c27565b60028204808652602086019550612c0185612ed9565b60005b82811015612c2057815488820152600190910190602001612c04565b8701945050505b505092915050565b600781527f7375636565737300000000000000000000000000000000000000000000000000602082015260400190565b612a87816107e6565b60208101612c768284612a7e565b92915050565b60608101612c8a8286612a7e565b612c976020830185612a7e565b6127af6040830184612a7e565b60408101612cb28285612a7e565b61258c6020830184612b69565b60208101612c768284612b4e565b60608101612cdb8286612b4e565b612ce86020830185612b60565b6127af6040830184612c5f565b60208101612c768284612b57565b60208101612c768284612b69565b6020808252810161258c8184612b7b565b60608082528101612d338186612b7b565b9050612d426020830185612c5f565b6127af6040830184612b72565b60408082528101612d608184612bb0565b9050818103602083015261258c81612c2f565b60408082528101612d848185612bb0565b905061258c6020830184612c5f565b60208101612c768284612c5f565b60c08101612daf8289612c5f565b612dbc6020830188612a7e565b612dc96040830187612a7e565b612dd66060830186612a7e565b8181036080830152612de88185612b7b565b905081810360a0830152612dfc8184612a8d565b98975050505050505050565b60c08101612e168289612c5f565b612e236020830188612a7e565b612e306040830187612a7e565b612e3d6060830186612a7e565b8181036080830152612e4f8185612bb0565b905081810360a0830152612dfc8184612af4565b60405181810167ffffffffffffffff81118282101715612e8257600080fd5b604052919050565b600067ffffffffffffffff821115612ea157600080fd5b5060209081020190565b600067ffffffffffffffff821115612ec257600080fd5b506020601f91909101601f19160190565b60200190565b60009081526020902090565b5190565b5490565b60010190565b600160a060020a031690565b151590565b60006006821061243b57fe5b60006005821061243b57fe5b60006003821061243b57fe5b6000612c7682612ef3565b6000612c7682612f04565b6000612c7682612f10565b6000612c7682612f1c565b82818337506000910152565b60005b83811015612f7b578181015183820152602001612f63565b83811115610d9c5750506000910152565b601f01601f1916905600a265627a7a7230582091d41bae869d4513435ad6b1a6dc30bdc36c84c925f50fbf9f44d0eb322273876c6578706572696d656e74616cf500378a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b";

    protected ServContract_sol_ServContract(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ServContract_sol_ServContract(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<OperationEndEventResponse> getOperationEndEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("OperationEnd", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<OperationEndEventResponse> responses = new ArrayList<OperationEndEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            OperationEndEventResponse typedResponse = new OperationEndEventResponse();
            typedResponse.blocNum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<OperationEndEventResponse> operationEndEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("OperationEnd", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, OperationEndEventResponse>() {
            @Override
            public OperationEndEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                OperationEndEventResponse typedResponse = new OperationEndEventResponse();
                typedResponse.blocNum = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public List<VoteEndEventResponse> getVoteEndEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("VoteEnd", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<VoteEndEventResponse> responses = new ArrayList<VoteEndEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            VoteEndEventResponse typedResponse = new VoteEndEventResponse();
            typedResponse.invokeId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.blockNum = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<VoteEndEventResponse> voteEndEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("VoteEnd", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, VoteEndEventResponse>() {
            @Override
            public VoteEndEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                VoteEndEventResponse typedResponse = new VoteEndEventResponse();
                typedResponse.invokeId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.blockNum = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> entryAddr() {
        Function function = new Function("entryAddr", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> invokeFee() {
        Function function = new Function("invokeFee", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> invokeId() {
        Function function = new Function("invokeId", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> client() {
        Function function = new Function("client", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> getBalance() {
        Function function = new Function("getBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> startBlockNum() {
        Function function = new Function("startBlockNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> servForfeit() {
        Function function = new Function("servForfeit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> chainIds(BigInteger param0) {
        Function function = new Function("chainIds", 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> judgerNumNeed() {
        Function function = new Function("judgerNumNeed", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> initDebug(BigInteger _totalOperation, BigInteger weiValue) {
        Function function = new Function(
                "initDebug", 
                Arrays.<Type>asList(new Uint256(_totalOperation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<String> getResult(String _invokeId) {
        Function function = new Function("getResult", 
                Arrays.<Type>asList(new Utf8String(_invokeId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> votedJudgerAddrs(BigInteger param0) {
        Function function = new Function("votedJudgerAddrs", 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> forceSettle(String _invokeId) {
        Function function = new Function(
                "forceSettle", 
                Arrays.<Type>asList(new Utf8String(_invokeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple3<Boolean, BigInteger, BigInteger>> getJudgerInfo(String _judger) {
        final Function function = new Function("getJudgerInfo", 
                Arrays.<Type>asList(new Address(_judger)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}, new TypeReference<Uint8>() {}, new TypeReference<Uint256>() {}));
        return new RemoteCall<Tuple3<Boolean, BigInteger, BigInteger>>(
                new Callable<Tuple3<Boolean, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<Boolean, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple3<Boolean, BigInteger, BigInteger>(
                                (Boolean) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<BigInteger> shareBalance() {
        Function function = new Function("shareBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> extend(String _invokeId) {
        Function function = new Function(
                "extend", 
                Arrays.<Type>asList(new Utf8String(_invokeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setTotalOperation(BigInteger _totalOperation) {
        Function function = new Function(
                "setTotalOperation", 
                Arrays.<Type>asList(new Uint256(_totalOperation)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> serverBalance() {
        Function function = new Function("serverBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> entry() {
        Function function = new Function("entry", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<String, BigInteger, BigInteger>> getProofs(String _invokeId, BigInteger _operationId) {
        final Function function = new Function("getProofs", 
                Arrays.<Type>asList(new Utf8String(_invokeId),
                new Uint256(_operationId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteCall<Tuple3<String, BigInteger, BigInteger>>(
                new Callable<Tuple3<String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple3<String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple3<String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<String> dApp() {
        Function function = new Function("dApp", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> judgerReward() {
        Function function = new Function("judgerReward", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> invalidNum() {
        Function function = new Function("invalidNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> servReward() {
        Function function = new Function("servReward", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> clientCompensation() {
        Function function = new Function("clientCompensation", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> serverDeposit() {
        Function function = new Function("serverDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> getBackMoney(String _invokeId) {
        Function function = new Function(
                "getBackMoney", 
                Arrays.<Type>asList(new Utf8String(_invokeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> insertProof(String _jsonStrProof, BigInteger _operationId, Boolean ifFinish) {
        Function function = new Function(
                "insertProof", 
                Arrays.<Type>asList(new Utf8String(_jsonStrProof),
                new Uint256(_operationId),
                new Bool(ifFinish)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> startInvocation(List<String> _chainIds, String _client, BigInteger _clientFee, String _invokeId) {
        Function function = new Function(
                "startInvocation", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.DynamicArray<Utf8String>(
                        org.web3j.abi.Utils.typeMap(_chainIds, Utf8String.class)),
                new Address(_client),
                new Uint256(_clientFee),
                new Utf8String(_invokeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> maxAuditTime() {
        Function function = new Function("maxAuditTime", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> dAppAgree(BigInteger weiValue) {
        Function function = new Function(
                "dAppAgree", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> judgerForfeit() {
        Function function = new Function("judgerForfeit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> judgerNumMin() {
        Function function = new Function("judgerNumMin", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getJudgerbalance(String _judger) {
        Function function = new Function("getJudgerbalance", 
                Arrays.<Type>asList(new Address(_judger)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> dAppDeposit() {
        Function function = new Function("dAppDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> maxServiceTime() {
        Function function = new Function("maxServiceTime", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> deposit(BigInteger weiValue) {
        Function function = new Function(
                "deposit", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function, weiValue);
    }

    public RemoteCall<BigInteger> SCState() {
        Function function = new Function("SCState", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> judgerAddrs(BigInteger param0) {
        Function function = new Function("judgerAddrs", 
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> community() {
        Function function = new Function("community", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> validNum() {
        Function function = new Function("validNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> audit(String _invokeId, Boolean _result, String _detail) {
        Function function = new Function(
                "audit", 
                Arrays.<Type>asList(new Utf8String(_invokeId),
                new Bool(_result),
                new Utf8String(_detail)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> clientBalance() {
        Function function = new Function("clientBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> judgerDeposit() {
        Function function = new Function("judgerDeposit", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> dAppBalance() {
        Function function = new Function("dAppBalance", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> operationEndBNum() {
        Function function = new Function("operationEndBNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> proofNum() {
        Function function = new Function("proofNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> totalOperation() {
        Function function = new Function("totalOperation", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> server() {
        Function function = new Function("server", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<ServContract_sol_ServContract> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, String _community, String _entry, String _server, String _dApp, BigInteger _servDeposit, BigInteger _judgerDeposit) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_community),
                new Address(_entry),
                new Address(_server),
                new Address(_dApp),
                new Uint256(_servDeposit),
                new Uint256(_judgerDeposit)));
        return deployRemoteCall(ServContract_sol_ServContract.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static RemoteCall<ServContract_sol_ServContract> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, BigInteger initialWeiValue, String _community, String _entry, String _server, String _dApp, BigInteger _servDeposit, BigInteger _judgerDeposit) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new Address(_community),
                new Address(_entry),
                new Address(_server),
                new Address(_dApp),
                new Uint256(_servDeposit),
                new Uint256(_judgerDeposit)));
        return deployRemoteCall(ServContract_sol_ServContract.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor, initialWeiValue);
    }

    public static ServContract_sol_ServContract load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ServContract_sol_ServContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static ServContract_sol_ServContract load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ServContract_sol_ServContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class OperationEndEventResponse {
        public BigInteger blocNum;
    }

    public static class VoteEndEventResponse {
        public String invokeId;

        public BigInteger blockNum;
    }
}
