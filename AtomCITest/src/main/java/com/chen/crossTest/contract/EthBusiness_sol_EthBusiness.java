package com.chen.crossTest.contract;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.EventValues;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicBytes;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple3;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import rx.Observable;
import rx.functions.Func1;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 3.2.0.
 */
public class EthBusiness_sol_EthBusiness extends Contract {
    private static final String BINARY = "";

    protected EthBusiness_sol_EthBusiness(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected EthBusiness_sol_EthBusiness(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public List<CrossEventEventResponse> getCrossEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("crossEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CrossEventEventResponse> responses = new ArrayList<CrossEventEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CrossEventEventResponse typedResponse = new CrossEventEventResponse();
            typedResponse.invokeID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.invokeDetail = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CrossEventEventResponse> crossEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("crossEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CrossEventEventResponse>() {
            @Override
            public CrossEventEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CrossEventEventResponse typedResponse = new CrossEventEventResponse();
                typedResponse.invokeID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.invokeDetail = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<CallBackEventEventResponse> getCallBackEventEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("callBackEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<CallBackEventEventResponse> responses = new ArrayList<CallBackEventEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            CallBackEventEventResponse typedResponse = new CallBackEventEventResponse();
            typedResponse.invokeID = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.callBackDetail = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<CallBackEventEventResponse> callBackEventEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("callBackEvent", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, CallBackEventEventResponse>() {
            @Override
            public CallBackEventEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                CallBackEventEventResponse typedResponse = new CallBackEventEventResponse();
                typedResponse.invokeID = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.callBackDetail = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public List<GetNumberEventResponse> getGetNumberEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("GetNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<GetNumberEventResponse> responses = new ArrayList<GetNumberEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            GetNumberEventResponse typedResponse = new GetNumberEventResponse();
            typedResponse.invokeId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.assetId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.num = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<GetNumberEventResponse> getNumberEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("GetNumber", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, GetNumberEventResponse>() {
            @Override
            public GetNumberEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                GetNumberEventResponse typedResponse = new GetNumberEventResponse();
                typedResponse.invokeId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.assetId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.num = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public List<ReadAssetEventResponse> getReadAssetEvents(TransactionReceipt transactionReceipt) {
        final Event event = new Event("ReadAsset", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        List<EventValues> valueList = extractEventParameters(event, transactionReceipt);
        ArrayList<ReadAssetEventResponse> responses = new ArrayList<ReadAssetEventResponse>(valueList.size());
        for (EventValues eventValues : valueList) {
            ReadAssetEventResponse typedResponse = new ReadAssetEventResponse();
            typedResponse.invokeId = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.assetId = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.total = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Observable<ReadAssetEventResponse> readAssetEventObservable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        final Event event = new Event("ReadAsset", 
                Arrays.<TypeReference<?>>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Uint256>() {}));
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(event));
        return web3j.ethLogObservable(filter).map(new Func1<Log, ReadAssetEventResponse>() {
            @Override
            public ReadAssetEventResponse call(Log log) {
                EventValues eventValues = extractEventParameters(event, log);
                ReadAssetEventResponse typedResponse = new ReadAssetEventResponse();
                typedResponse.invokeId = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.assetId = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.total = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public RemoteCall<String> creator() {
        Function function = new Function("creator", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> unLockAssetDebug(String _assetID) {
        Function function = new Function(
                "unLockAssetDebug", 
                Arrays.<Type>asList(new Utf8String(_assetID)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> incressAsset_lock_do(String _assetID, BigInteger _num, String _invokeId, byte[] _lockHash) {
        Function function = new Function(
                "incressAsset_lock_do", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Utf8String(_invokeId),
                new Bytes32(_lockHash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setAsset(String _assetID, BigInteger _num, Boolean _lock) {
        Function function = new Function(
                "setAsset", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Bool(_lock)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> strConcatByArray32(List<String> _arr) {
        Function function = new Function("strConcatByArray32", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray32<Utf8String>(
                        org.web3j.abi.Utils.typeMap(_arr, Utf8String.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<BigInteger> invokeID() {
        Function function = new Function("invokeID", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> stringToUint(String _a) {
        Function function = new Function("stringToUint", 
                Arrays.<Type>asList(new Utf8String(_a)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> stringToUint(String _a, BigInteger _b) {
        Function function = new Function("stringToUint", 
                Arrays.<Type>asList(new Utf8String(_a),
                new Uint256(_b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> strConcatByArray7(List<String> _arr) {
        Function function = new Function("strConcatByArray7", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray7<Utf8String>(
                        org.web3j.abi.Utils.typeMap(_arr, Utf8String.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> bytesToString(byte[] source) {
        Function function = new Function("bytesToString", 
                Arrays.<Type>asList(new DynamicBytes(source)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> incressAsset_undo_unlock(String _assetID, BigInteger _num, String _invokeId, String _hashKey) {
        Function function = new Function(
                "incressAsset_undo_unlock", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Utf8String(_invokeId),
                new Utf8String(_hashKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setContractLock(Boolean _lock) {
        Function function = new Function(
                "setContractLock", 
                Arrays.<Type>asList(new Bool(_lock)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> incressAsset_undo_unlock_contract(String _assetID, BigInteger _num, String _invokeId, String _hashKey) {
        Function function = new Function(
                "incressAsset_undo_unlock_contract", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Utf8String(_invokeId),
                new Utf8String(_hashKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> incressAsset_lock_do_contract(String _assetID, BigInteger _num, String _invokeId, byte[] _lockHash) {
        Function function = new Function(
                "incressAsset_lock_do_contract", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Utf8String(_invokeId),
                new Bytes32(_lockHash)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getAsset_atomic(String _assetID, String _invokeId) {
        Function function = new Function(
                "getAsset_atomic", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Utf8String(_invokeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> setcountNumber(BigInteger _num) {
        Function function = new Function(
                "setcountNumber", 
                Arrays.<Type>asList(new Uint256(_num)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> getNumber_atomic(String _assetId, String _invokeId) {
        Function function = new Function(
                "getNumber_atomic", 
                Arrays.<Type>asList(new Utf8String(_assetId),
                new Utf8String(_invokeId)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> strConcatByArray(List<String> _arr) {
        Function function = new Function("strConcatByArray", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.StaticArray<Utf8String>(
                        org.web3j.abi.Utils.typeMap(_arr, Utf8String.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> incressCount() {
        Function function = new Function(
                "incressCount", 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> bytes32ToString(byte[] b32name) {
        Function function = new Function("bytes32ToString", 
                Arrays.<Type>asList(new Bytes32(b32name)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> strConcatByArray11(List<String> _arr) {
        Function function = new Function("strConcatByArray11", 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.StaticArray11<Utf8String>(
                        org.web3j.abi.Utils.typeMap(_arr, Utf8String.class))),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<Tuple3<BigInteger, Boolean, String>> getAsset(String _assetID) {
        final Function function = new Function("getAsset", 
                Arrays.<Type>asList(new Utf8String(_assetID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Bool>() {}, new TypeReference<Utf8String>() {}));
        return new RemoteCall<Tuple3<BigInteger, Boolean, String>>(
                new Callable<Tuple3<BigInteger, Boolean, String>>() {
                    @Override
                    public Tuple3<BigInteger, Boolean, String> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);;
                        return new Tuple3<BigInteger, Boolean, String>(
                                (BigInteger) results.get(0).getValue(), 
                                (Boolean) results.get(1).getValue(), 
                                (String) results.get(2).getValue());
                    }
                });
    }

    public RemoteCall<Boolean> contractLock() {
        Function function = new Function("contractLock", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteCall<byte[]> stringToBytes32(String source) {
        Function function = new Function("stringToBytes32", 
                Arrays.<Type>asList(new Utf8String(source)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<String> incressAsset_getOldData(String _assetID) {
        Function function = new Function("incressAsset_getOldData", 
                Arrays.<Type>asList(new Utf8String(_assetID)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> createAsset(String _assetID, BigInteger _total) {
        Function function = new Function(
                "createAsset", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_total)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> incressAsset_unlock(String _assetID, BigInteger _num, String _invokeId, String _hashKey) {
        Function function = new Function(
                "incressAsset_unlock", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Utf8String(_invokeId),
                new Utf8String(_hashKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<byte[]> stringToBytes(String source) {
        Function function = new Function("stringToBytes", 
                Arrays.<Type>asList(new Utf8String(source)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeRemoteCallSingleValueReturn(function, byte[].class);
    }

    public RemoteCall<BigInteger> countNum() {
        Function function = new Function("countNum", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<BigInteger> getNumber(String _assetId) {
        Function function = new Function("getNumber", 
                Arrays.<Type>asList(new Utf8String(_assetId)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<String> uintToString(BigInteger i) {
        Function function = new Function("uintToString", 
                Arrays.<Type>asList(new Uint256(i)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<TransactionReceipt> setServer(String _server) {
        Function function = new Function(
                "setServer", 
                Arrays.<Type>asList(new Address(_server)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<BigInteger> bytesToInt(byte[] b) {
        Function function = new Function("bytesToInt", 
                Arrays.<Type>asList(new DynamicBytes(b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteCall<TransactionReceipt> incressAsset_unlock_contract(String _assetID, BigInteger _num, String _invokeId, String _hashKey) {
        Function function = new Function(
                "incressAsset_unlock_contract", 
                Arrays.<Type>asList(new Utf8String(_assetID),
                new Uint256(_num),
                new Utf8String(_invokeId),
                new Utf8String(_hashKey)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<String> server() {
        Function function = new Function("server", 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteCall<String> strConcat(String _a, String _b) {
        Function function = new Function("strConcat", 
                Arrays.<Type>asList(new Utf8String(_a),
                new Utf8String(_b)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public static RemoteCall<EthBusiness_sol_EthBusiness> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EthBusiness_sol_EthBusiness.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<EthBusiness_sol_EthBusiness> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(EthBusiness_sol_EthBusiness.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static EthBusiness_sol_EthBusiness load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new EthBusiness_sol_EthBusiness(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public static EthBusiness_sol_EthBusiness load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new EthBusiness_sol_EthBusiness(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static class CrossEventEventResponse {
        public String invokeID;

        public String invokeDetail;
    }

    public static class CallBackEventEventResponse {
        public String invokeID;

        public String callBackDetail;
    }

    public static class GetNumberEventResponse {
        public String invokeId;

        public String assetId;

        public BigInteger num;
    }

    public static class ReadAssetEventResponse {
        public String invokeId;

        public String assetId;

        public BigInteger total;
    }
}
